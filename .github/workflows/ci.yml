name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install autopep8 isort
    
    - name: Auto-fix code formatting
      run: |
        echo "üîß Auto-fixing code formatting..."
        
        # Auto-format with black
        black .
        
        # Auto-fix import sorting
        isort .
        
        # Auto-fix basic PEP8 issues
        autopep8 --in-place --aggressive --aggressive --recursive .
        
        echo "‚úÖ Code formatting completed"
    
    - name: Commit auto-fixes
      if: matrix.python-version == '3.11'  # Only commit once
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        if [[ `git status --porcelain` ]]; then
          echo "üìù Committing auto-fixes..."
          git add .
          git commit -m "ü§ñ Auto-fix: Format code with black, isort, and autopep8
          
          - Applied black formatting
          - Sorted imports with isort  
          - Fixed PEP8 issues with autopep8
          
          [skip ci]"
          git push
          echo "‚úÖ Auto-fixes committed and pushed"
        else
          echo "‚úÖ No formatting changes needed"
        fi
    
    - name: Check for remaining issues
      run: |
        echo "üîç Checking for remaining issues..."
        
        # Check for serious syntax errors only
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        
        # Show warnings but don't fail (since we auto-fixed most issues)
        echo "‚ÑπÔ∏è  Remaining style warnings (non-blocking):"
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true
        
        echo "‚úÖ Code quality check completed"
       
    - name: Test with pytest
      run: |
        echo "üß™ Running tests..."
        pytest -v 
        echo "‚úÖ All tests passed"

  # Separate job for security and dependency checks
  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Check for security vulnerabilities
      run: |
        echo "üîí Checking for security vulnerabilities..."
        
        # Check dependencies for known vulnerabilities
        safety check
        
        # Check code for security issues
        bandit -r . -f json || true
        
        echo "‚úÖ Security check completed" 